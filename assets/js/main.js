// assets/js/main.js
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously, signInWithCustomToken, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, query, orderBy, onSnapshot, doc, setDoc, deleteDoc, Timestamp, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
import { firebaseConfig, ADMIN_EMAIL } from "./firebase-config.js";

// Global Firebase variables
let app;
let db;
let auth;
// Default user ID used if no user is authenticated (prevents errors in path construction)
let userId = 'default_user'; 
let BLOG_COLLECTION_PATH = 'artifacts/blog-manager-app/users/default_user/posts'; // Using 'default_user' initially
const UI_CONTENT_PATH = 'artifacts/ui-manager-app/ui_content/data'; // Single document path for UI content
let uiData = {}; // Global variable to hold the fetched UI content
let currentLang = "en";


// ---------------------------------------------
// Language Data and Functions
// ---------------------------------------------

const content = {
// ... (Language data remains unchanged - this acts as fallback/default)
    en: {
        page_title: "Ahmed Heweide | Operations & Hospitality Expert Dashboard",
        header_subtitle: "Operations Manager",
        lang_button: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
        contact_now_btn: "Contact Now",
        nav_about: "About",
        nav_kpis: "KPIs",
        nav_projects: "Projects",
        nav_expertise: "Expertise",
        nav_career: "Career",
        nav_certifications: "Certifications",
        nav_testimonials: "Testimonials",
        nav_blog: "Blog",
        admin_login_btn: "Login",
        admin_login_btn_logged_in: "Admin / Logout",
        admin_unauthorized_msg: "Authorization failed. Please log in with the admin email.",
        admin_panel_title: "üîí Admin Panel: Manage Blog Posts",
        admin_add_post_title: "Add New Post",
        admin_title_en: "Title (English)",
        admin_title_ar: "Title (Arabic)",
        admin_desc_en: "Short Description (English)",
        admin_desc_ar: "Short Description (Arabic)",
        admin_content: "Post Content (in Markdown)",
        admin_save_btn: "Save Post",
        admin_cancel_btn: "Cancel",
        admin_current_posts_title: "Current Posts",
        admin_edit_btn: "Edit",
        admin_delete_btn: "Delete",
        blog_loading: "Loading posts...",
        blog_back_btn: "‚Üê Back to all posts",
        blog_read_more: "Read Article ‚Üí",
        blog_title: '<span class="accent-color">&#x270D;</span> Blog - Operational Leadership Articles',
        
        // Hero Section
        about_tagline: "Operations Manager | Hospitality & Property Management Expert",
        about_main_title: "Ahmed Heweide: Strategic Leadership for <span class='accent-color'>Profit Growth</span>.",
        about_body: "I am a dedicated Operations Manager specializing in hospitality and property management. My focus is on driving operational excellence and financial efficiency. I lead innovative solutions‚Äîlike developing in-house Property Management Systems (PMS)‚Äîto sharply reduce costs and increase revenue. Committed to building strategic partnerships and leading large teams towards corporate objectives.",
        cv_download_btn: "Download CV",
        linkedin_btn: "View LinkedIn",
        photo_placeholder: "Professional Photo",
        
        // KPIs
        kpis_title: '<span class="accent-color">&#x26A1;</span> Tangible Results (Delta Dream)',
        kpi1_label: "Quarterly System Cost Savings",
        kpi1_desc: "Saved (EGP) by developing an in-house Property Management System (PMS).",
        kpi2_label: "Annual Booking Growth",
        kpi2_desc: "Increase in bookings vs. previous year (Achieved 6,396 bookings).",
        kpi3_label: "Operational Scope",
        kpi3_desc: "Managed: 200 chalets, 2 hotels (42 suites/rooms), and 1 Oriental grill restaurant.",
        
        // Projects
        projects_title: '<span class="accent-color">&#x270F;</span> Projects & Success Stories',
        project1_tag: "Operational Technology",
        project1_title: "Custom In-House PMS",
        project1_desc: "Led the development of a software solution to reduce reliance on expensive external systems.",
        project1_label: "Cost Reduction",
        project1_item1: "**Challenge:** The previous PMS system cost EGP 900K quarterly.",
        project1_item2: "**Solution:** I led the development of an internal PMS, from design to execution.",
        project1_item3: "**Result:** Quarterly operational cost was reduced to simple annual hosting fees, achieving savings of over **EGP 750K per quarter** after covering the one-time development cost (EGP 150K).",
        project2_tag: "Strategic Growth",
        project2_title: "Portfolio Expansion & +20% Growth",
        project2_desc: "Effective strategies to increase revenue and expand the base of managed properties.",
        project2_label: "Revenue Increase",
        project2_item1: "**Mission:** Achieve growth in bookings and expand the managed property portfolio.",
        project2_item2: "**Actions:** Managed owner relations and strategic partnerships to expand the company's portfolio.",
        project2_item3: "**Result:** A jump in annual revenue, achieving **6,396 bookings**, representing a **20% growth** over the previous year.",
        
        // Testimonials
        testimonials_title: '<span class="accent-color">&#x2b50;</span> What Partners and Managers Say',
        testimonial1_quote: `"Ahmed possesses clear strategic leadership. His ability to identify cost-saving opportunities‚Äîsuch as the in-house PMS project‚Äîwas crucial in achieving high profitable sustainability."`,
        testimonial1_name: "Former Manager (Placeholder)",
        testimonial1_role: "CEO, Delta Dream",
        testimonial2_quote: `"His relationship management skills allowed us to expand confidently. Ahmed handles owners and partners with high professionalism, ensuring sustainable growth in our property portfolio."`,
        testimonial2_name: "Partner (Placeholder)",
        testimonial2_role: "Major Property Owner",
        testimonials_footer: 'More verified testimonials are available on my <a href="https://www.linkedin.com/in/ahmedheweide" target="_blank" class="accent-color hover:underline">LinkedIn</a> page.',

        // Expertise
        expertise_title: '<span class="accent-color">&#x2699;</span> Core Expertise',
        skill1_title: "Partner Relations",
        skill1_desc: "Portfolio expansion through strategic partnerships.",
        skill2_title: "Project Management",
        skill2_desc: "Leading critical projects like in-house PMS development end-to-end.",
        skill3_title: "Cost Reduction",
        skill3_desc: "Achieving multi-million EGP savings and ROI analysis.",
        skill4_title: "Strategic Planning",
        skill4_desc: "Full-authority decision making and defining future corporate plans.",
        skill5_title: "Team Leadership",
        skill5_desc: "Experienced in leading large teams and managing HR efficiently.",
        skill6_title: "Hotel PMS",
        skill6_desc: "Deep expertise in hotel operations and custom PMS development.",
        skill7_title: "Problem-Solving",
        skill7_desc: "Designing and implementing tailored solutions to address operational gaps.",
        skill8_title: "Stakeholder Relations",
        skill8_desc: "Ensuring positive client experience and managing key partnerships.",

        // Certifications
        certifications_title: '<span class="accent-color">&#x1F393;</span> Qualifications & Certifications',
        cert1_title: "Managerial Expertise in Hotel PMS Operations",
        cert1_desc: "Beyond Basics",
        cert2_title: "Quality Management for Operational Excellence",
        cert2_desc: "Specialized Qualification",
        cert3_title: "Front-End Web Development Diploma",
        cert3_desc: "Web Development",
        cert4_title: "Programming Fundamentals Diploma",
        cert4_desc: "Fundamentals",
        certifications_footer: "Also: Working with Difficult People and AMIDEAST Scholarship.",

        // Career (Note: Dates and locations often remain fixed, but included for completeness)
        career_title: '<span class="accent-color">&#x23F1;</span> Career Path - Experience History',
        career1_date: "March 2024 - Present",
        career1_title: "Operations Manager",
        career1_location: "Delta Dream | Egypt",
        career1_item1: "Full strategic leadership for projects including 200 chalets, two hotels, and a restaurant.",
        career1_item2: "Managed a seasonal operational budget of EGP 7.3 million efficiently.",
        career1_item3: "Managed owner relations (chalet owners) to expand the company's portfolio.",
        career4_date: "Education",
        career4_title: "Bachelor of Business Administration (BBA)",
        career4_location: "Kafr El Sheikh University",
        
        // Contact (Placeholder texts are also in content)
        contact_title: '<span class="accent-color">|</span> Contact Ahmed Heweide',
        contact_desc: "For strategic partnership opportunities or consultation on operations and hospitality management, please reach out.",
        contact_name_label: "Full Name",
        contact_name_placeholder: "Enter your name",
        contact_email_label: "Email Address",
        contact_email_placeholder: "Enter your email",
        contact_message_label: "Project Scope / Inquiry",
        contact_message_placeholder: "Describe the type of partnership or challenge you are facing",
        contact_submit_btn: "Send Message",
        formspree_notice: "*This form uses the FormSubmit service to ensure email delivery without server-side code. Please try submitting a test email to verify the connection.",
        footer_text1: '&copy; 2025 Ahmed Heweide | Operations Manager. Performance-driven Minimalist Design.',
    },
    ar: {
        page_title: "ÿ£ÿ≠ŸÖÿØ ŸáŸàŸäÿØŸä | ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿÆÿ®Ÿäÿ± ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ŸàÿßŸÑÿ∂ŸäÿßŸÅÿ©",
        header_subtitle: "ŸÖÿØŸäÿ± ÿßŸÑÿπŸÖŸÑŸäÿßÿ™",
        lang_button: "English",
        contact_now_btn: "ÿ™ŸàÿßÿµŸÑ ÿßŸÑÿ¢ŸÜ",
        nav_about: "ÿßŸÑŸÜÿ®ÿ∞ÿ©",
        nav_kpis: "ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ°",
        nav_projects: "ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ",
        nav_expertise: "ÿßŸÑÿÆÿ®ÿ±ÿßÿ™ ÿßŸÑÿ¨ŸàŸáÿ±Ÿäÿ©",
        nav_career: "ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑŸÖŸáŸÜŸä",
        nav_certifications: "ÿßŸÑŸÖÿ§ŸáŸÑÿßÿ™ ŸàÿßŸÑÿ¥ŸáÿßÿØÿßÿ™",
        nav_testimonials: "ÿßŸÑÿ™ŸàÿµŸäÿßÿ™",
        nav_blog: "ÿßŸÑŸÖÿØŸàŸÜÿ©",
        admin_login_btn: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ",
        admin_login_btn_logged_in: "ÿßŸÑŸÖÿ¥ÿ±ŸÅ / ÿÆÿ±Ÿàÿ¨",
        admin_unauthorized_msg: "ŸÅÿ¥ŸÑ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿ©. ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ•ŸäŸÖŸäŸÑ ÿßŸÑŸÖÿ¥ÿ±ŸÅ.",
        admin_panel_title: "üîí ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿßŸÑŸÖÿ¥ÿ±ŸÅ: ÿ•ÿØÿßÿ±ÿ© ŸÖŸÇÿßŸÑÿßÿ™ ÿßŸÑŸÖÿØŸàŸÜÿ©",
        admin_add_post_title: "ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÇÿßŸÑ ÿ¨ÿØŸäÿØ",
        admin_title_en: "ÿßŸÑÿπŸÜŸàÿßŸÜ (ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©)",
        admin_title_ar: "ÿßŸÑÿπŸÜŸàÿßŸÜ (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)",
        admin_desc_en: "ŸàÿµŸÅ ŸÖÿÆÿ™ÿµÿ± (ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©)",
        admin_desc_ar: "ŸàÿµŸÅ ŸÖÿÆÿ™ÿµÿ± (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)",
        admin_content: "ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖŸÇÿßŸÑ (ÿ®ÿµŸäÿ∫ÿ© Markdown)",
        admin_save_btn: "ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÇÿßŸÑ",
        admin_cancel_btn: "ÿ•ŸÑÿ∫ÿßÿ°",
        admin_current_posts_title: "ÿßŸÑŸÖŸÇÿßŸÑÿßÿ™ ÿßŸÑÿ≠ÿßŸÑŸäÿ©",
        admin_edit_btn: "ÿ™ÿπÿØŸäŸÑ",
        admin_delete_btn: "ÿ≠ÿ∞ŸÅ",
        blog_loading: "ÿ¨ÿßÿ±Ÿç ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÇÿßŸÑÿßÿ™...",
        blog_back_btn: "‚Üê ÿßŸÑÿπŸàÿØÿ© ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÇÿßŸÑÿßÿ™",
        blog_read_more: "ÿßŸÇÿ±ÿ£ ÿßŸÑŸÖŸÇÿßŸÑ ‚Üí",
        blog_title: '<span class="accent-color">&#x270D;</span> ÿßŸÑŸÖÿØŸàŸÜÿ© - ŸÖŸÇÿßŸÑÿßÿ™ ŸÅŸä ÿßŸÑŸÇŸäÿßÿØÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©',

        // Hero Section
        about_tagline: "ŸÖÿØŸäÿ± ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ | ÿÆÿ®Ÿäÿ± ŸÅŸä ÿßŸÑÿ∂ŸäÿßŸÅÿ© Ÿàÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖÿ™ŸÑŸÉÿßÿ™",
        about_main_title: "ÿ£ÿ≠ŸÖÿØ ŸáŸàŸäÿØŸä: ŸÇŸäÿßÿØÿ© ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸÑÿ™ÿ≠ŸÇŸäŸÇ <span class='accent-color'>ŸÜŸÖŸà ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠</span>.",
        about_body: "ÿ£ŸÜÿß ŸÖÿØŸäÿ± ÿπŸÖŸÑŸäÿßÿ™ ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ∂ŸäÿßŸÅÿ© ŸàÿßŸÑŸÖŸÖÿ™ŸÑŸÉÿßÿ™. ÿ£ÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿØŸÅÿπ ÿßŸÑÿ™ŸÖŸäÿ≤ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸä ŸàÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑŸÖÿßŸÑŸäÿ©. ÿ£ŸÇŸàÿØ ÿ≠ŸÑŸàŸÑŸãÿß ŸÖÿ®ÿ™ŸÉÿ±ÿ©‚ÄîŸÖÿ´ŸÑ ÿ™ÿ∑ŸàŸäÿ± ÿ£ŸÜÿ∏ŸÖÿ© ÿ•ÿØÿßÿ±ÿ© ŸÖŸÖÿ™ŸÑŸÉÿßÿ™ ÿØÿßÿÆŸÑŸäÿ© (PMS)‚ÄîŸÑÿÆŸÅÿ∂ ÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ ÿ®ÿ¥ŸÉŸÑ ÿ≠ÿßÿØ Ÿàÿ≤ŸäÿßÿØÿ© ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™. ŸÖŸÑÿ™ÿ≤ŸÖ ÿ®ÿ®ŸÜÿßÿ° ÿ¥ÿ±ÿßŸÉÿßÿ™ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸàŸÇŸäÿßÿØÿ© ŸÅÿ±ŸÇ ŸÉÿ®Ÿäÿ±ÿ© ŸÜÿ≠Ÿà ÿ™ÿ≠ŸÇŸäŸÇ ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿäÿ©.",
        cv_download_btn: "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ÿ© ÿßŸÑÿ∞ÿßÿ™Ÿäÿ©",
        linkedin_btn: "ÿπÿ±ÿ∂ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä ŸÅŸä LinkedIn",
        photo_placeholder: "ÿµŸàÿ±ÿ© ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©",
        
        // KPIs
        kpis_title: '<span class="accent-color">&#x26A1;</span> ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸÑŸÖŸàÿ≥ÿ© (ÿØŸÑÿ™ÿß ÿØÿ±ŸäŸÖ)',
        kpi1_label: "ŸàŸÅŸàÿ±ÿßÿ™ ÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸäÿ© ŸÅŸä ÿ™ŸÉÿßŸÑŸäŸÅ ÿßŸÑÿ£ŸÜÿ∏ŸÖÿ©",
        kpi1_desc: "ÿ™ŸÖ ÿ™ŸàŸÅŸäÿ±Ÿá (ÿ®ÿßŸÑÿ¨ŸÜŸäŸá ÿßŸÑŸÖÿµÿ±Ÿä) ÿπÿ®ÿ± ÿ™ÿ∑ŸàŸäÿ± ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ŸÖŸÖÿ™ŸÑŸÉÿßÿ™ ÿØÿßÿÆŸÑŸä (PMS).",
        kpi2_label: "ÿßŸÑŸÜŸÖŸà ÿßŸÑÿ≥ŸÜŸàŸä ŸÑŸÑÿ≠ÿ¨Ÿàÿ≤ÿßÿ™",
        kpi2_desc: "ÿ≤ŸäÿßÿØÿ© ŸÅŸä ÿßŸÑÿ≠ÿ¨Ÿàÿ≤ÿßÿ™ ŸÖŸÇÿßÿ±ŸÜÿ© ÿ®ÿßŸÑÿπÿßŸÖ ÿßŸÑÿ≥ÿßÿ®ŸÇ (ÿ™ŸÖ ÿ™ÿ≠ŸÇŸäŸÇ 6,396 ÿ≠ÿ¨ÿ≤).",
        kpi3_label: "ŸÜÿ∑ÿßŸÇ ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©",
        kpi3_desc: "ÿ™ŸÖÿ™ ÿ•ÿØÿßÿ±ÿ©: 200 ÿ¥ÿßŸÑŸäŸáÿå ŸÅŸÜÿØŸÇÿßŸÜ (42 ÿ¨ŸÜÿßÿ≠/ÿ∫ÿ±ŸÅÿ©)ÿå ŸàŸÖÿ∑ÿπŸÖ ŸÖÿ¥ÿßŸàŸä ÿ¥ÿ±ŸÇŸä Ÿàÿßÿ≠ÿØ.",

        // Projects
        projects_title: '<span class="accent-color">&#x270F;</span> ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ŸàŸÇÿµÿµ ÿßŸÑŸÜÿ¨ÿßÿ≠',
        project1_tag: "ÿßŸÑÿ™ŸÇŸÜŸäÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©",
        project1_title: "ŸÜÿ∏ÿßŸÖ PMS ÿØÿßÿÆŸÑŸä ŸÖÿÆÿµÿµ",
        project1_desc: "ŸÇŸèÿØÿ™Ÿè ÿ™ÿ∑ŸàŸäÿ± ÿ≠ŸÑ ÿ®ÿ±ŸÖÿ¨Ÿä ŸÑÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿßÿπÿ™ŸÖÿßÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÜÿ∏ŸÖÿ© ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ© ÿ®ÿßŸáÿ∏ÿ© ÿßŸÑÿ´ŸÖŸÜ.",
        project1_label: "ÿÆŸÅÿ∂ ÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ",
        project1_item1: "**ÿßŸÑÿ™ÿ≠ÿØŸä:** ŸÉÿßŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≥ÿßÿ®ŸÇ ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÖÿ™ŸÑŸÉÿßÿ™ ŸäŸÉŸÑŸÅ 900 ÿ£ŸÑŸÅ ÿ¨ŸÜŸäŸá ŸÖÿµÿ±Ÿä ÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸäŸãÿß.",
        project1_item2: "**ÿßŸÑÿ≠ŸÑ:** ŸÇŸèÿØÿ™Ÿè ÿ™ÿ∑ŸàŸäÿ± ŸÜÿ∏ÿßŸÖ PMS ÿØÿßÿÆŸÑŸäÿå ÿ®ÿØÿ°ÿßŸã ŸÖŸÜ ÿßŸÑÿ™ÿµŸÖŸäŸÖ Ÿàÿ≠ÿ™Ÿâ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞.",
        project1_item3: "**ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:** ÿßŸÜÿÆŸÅÿ∂ÿ™ ÿßŸÑÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ© ÿßŸÑÿ±ÿ®ÿπ ÿ≥ŸÜŸàŸäÿ© ÿ•ŸÑŸâ ÿ±ÿ≥ŸàŸÖ ÿßÿ≥ÿ™ÿ∂ÿßŸÅÿ© ÿ≥ŸÜŸàŸäÿ© ÿ®ÿ≥Ÿäÿ∑ÿ©ÿå ŸÖÿ≠ŸÇŸÇÿßŸã ŸàŸÅÿ±ÿßŸã ÿ™ÿ¨ÿßŸàÿ≤ **750 ÿ£ŸÑŸÅ ÿ¨ŸÜŸäŸá ŸÖÿµÿ±Ÿä ŸÉŸÑ ÿ±ÿ®ÿπ ÿ≥ŸÜÿ©** ÿ®ÿπÿØ ÿ™ÿ∫ÿ∑Ÿäÿ© ÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿ™ÿ∑ŸàŸäÿ± ŸÑŸÖÿ±ÿ© Ÿàÿßÿ≠ÿØÿ© (150 ÿ£ŸÑŸÅ ÿ¨ŸÜŸäŸá ŸÖÿµÿ±Ÿä).",
        project2_tag: "ÿßŸÑŸÜŸÖŸà ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿä",
        project2_title: "ÿ™Ÿàÿ≥Ÿäÿπ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© ŸàŸÜŸÖŸà +20%",
        project2_desc: "ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ŸÅÿπÿßŸÑÿ© ŸÑÿ≤ŸäÿßÿØÿ© ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ Ÿàÿ™Ÿàÿ≥Ÿäÿπ ŸÇÿßÿπÿØÿ© ÿßŸÑŸÖŸÖÿ™ŸÑŸÉÿßÿ™ ÿßŸÑŸÖÿØÿßÿ±ÿ©.",
        project2_label: "ÿ≤ŸäÿßÿØÿ© ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™",
        project2_item1: "**ÿßŸÑŸÖŸáŸÖÿ©:** ÿ™ÿ≠ŸÇŸäŸÇ ŸÜŸÖŸà ŸÅŸä ÿßŸÑÿ≠ÿ¨Ÿàÿ≤ÿßÿ™ Ÿàÿ™Ÿàÿ≥Ÿäÿπ ŸÖÿ≠ŸÅÿ∏ÿ© ÿßŸÑŸÖŸÖÿ™ŸÑŸÉÿßÿ™ ÿßŸÑŸÖÿØÿßÿ±ÿ©.",
        project2_item2: "**ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™:** ÿ•ÿØÿßÿ±ÿ© ÿπŸÑÿßŸÇÿßÿ™ ÿßŸÑŸÖŸÑÿßŸÉ ŸàÿßŸÑÿ¥ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸÑÿ™Ÿàÿ≥Ÿäÿπ ŸÖÿ≠ŸÅÿ∏ÿ© ÿßŸÑÿ¥ÿ±ŸÉÿ©.",
        project2_item3: "**ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:** ŸÇŸÅÿ≤ÿ© ŸÅŸä ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑÿ≥ŸÜŸàŸäÿ©ÿå ÿ®ÿ™ÿ≠ŸÇŸäŸÇ **6,396 ÿ≠ÿ¨ÿ≤Ÿãÿß**ÿå ŸàŸáŸà ŸÖÿß ŸäŸÖÿ´ŸÑ **ŸÜŸÖŸàŸãÿß ÿ®ŸÜÿ≥ÿ®ÿ© 20%** ŸÖŸÇÿßÿ±ŸÜÿ© ÿ®ÿßŸÑÿπÿßŸÖ ÿßŸÑÿ≥ÿßÿ®ŸÇ.",
        
        // Testimonials
        testimonials_title: '<span class="accent-color">&#x2b50;</span> ŸÖÿß ŸäŸÇŸàŸÑŸá ÿßŸÑÿ¥ÿ±ŸÉÿßÿ° ŸàÿßŸÑŸÖÿØÿ±ÿßÿ°',
        testimonial1_quote: `"ŸäŸÖÿ™ŸÑŸÉ ÿ£ÿ≠ŸÖÿØ ŸÇŸäÿßÿØÿ© ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© Ÿàÿßÿ∂ÿ≠ÿ©. ŸÉÿßŸÜÿ™ ŸÇÿØÿ±ÿ™Ÿá ÿπŸÑŸâ ÿ™ÿ≠ÿØŸäÿØ ŸÅÿ±ÿµ ÿÆŸÅÿ∂ ÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ‚ÄîŸÖÿ´ŸÑ ŸÖÿ¥ÿ±Ÿàÿπ ŸÜÿ∏ÿßŸÖ PMS ÿßŸÑÿØÿßÿÆŸÑŸä‚Äîÿ≠ÿßÿ≥ŸÖÿ© ŸÅŸä ÿ™ÿ≠ŸÇŸäŸÇ ÿßÿ≥ÿ™ÿØÿßŸÖÿ© ÿπÿßŸÑŸäÿ© ŸàŸÖÿ±ÿ®ÿ≠ÿ©."`,
        testimonial1_name: "ŸÖÿØŸäÿ± ÿ≥ÿßÿ®ŸÇ (ŸÜŸÖŸàÿ∞ÿ¨Ÿä)",
        testimonial1_role: "ÿßŸÑÿ±ÿ¶Ÿäÿ≥ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞Ÿäÿå ÿØŸÑÿ™ÿß ÿØÿ±ŸäŸÖ",
        testimonial2_quote: `"ÿ≥ŸÖÿ≠ÿ™ ŸÑŸÜÿß ŸÖŸáÿßÿ±ÿßÿ™Ÿá ŸÅŸä ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÑÿßŸÇÿßÿ™ ÿ®ÿßŸÑÿ™Ÿàÿ≥ÿπ ÿ®ÿ´ŸÇÿ©. Ÿäÿ™ÿπÿßŸÖŸÑ ÿ£ÿ≠ŸÖÿØ ŸÖÿπ ÿßŸÑŸÖŸÑÿßŸÉ ŸàÿßŸÑÿ¥ÿ±ŸÉÿßÿ° ÿ®ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿπÿßŸÑŸäÿ©ÿå ŸÖŸÖÿß Ÿäÿ∂ŸÖŸÜ ŸÜŸÖŸàÿßŸã ŸÖÿ≥ÿ™ÿØÿßŸÖÿßŸã ŸÅŸä ŸÖÿ≠ŸÅÿ∏ÿ™ŸÜÿß ÿßŸÑÿπŸÇÿßÿ±Ÿäÿ©."`,
        testimonial2_name: "ÿ¥ÿ±ŸäŸÉ (ŸÜŸÖŸàÿ∞ÿ¨Ÿä)",
        testimonial2_role: "ŸÖÿßŸÑŸÉ ÿπŸÇÿßÿ±ÿßÿ™ ÿ±ÿ¶Ÿäÿ≥Ÿä",
        testimonials_footer: 'ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ™ŸàÿµŸäÿßÿ™ ÿßŸÑŸÖŸàÿ´ŸÇÿ© ŸÖÿ™ÿßÿ≠ÿ© ÿπŸÑŸâ ÿµŸÅÿ≠ÿ™Ÿä ŸÅŸä <a href="https://www.linkedin.com/in/ahmedheweide" target="_blank" class="accent-color hover:underline">LinkedIn</a>.',

        // Expertise
        expertise_title: '<span class="accent-color">&#x2699;</span> ÿßŸÑÿÆÿ®ÿ±ÿßÿ™ ÿßŸÑÿ¨ŸàŸáÿ±Ÿäÿ©',
        skill1_title: "ÿ•ÿØÿßÿ±ÿ© ÿπŸÑÿßŸÇÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿßÿ°",
        skill1_desc: "ÿ™Ÿàÿ≥Ÿäÿπ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ¥ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©.",
        skill2_title: "ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ",
        skill2_desc: "ŸÇŸäÿßÿØÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ≠ÿßÿ≥ŸÖÿ© ŸÖÿ´ŸÑ ÿ™ÿ∑ŸàŸäÿ± ŸÜÿ∏ÿßŸÖ PMS ÿØÿßÿÆŸÑŸä ŸÖŸÜ ÿßŸÑÿ®ÿØÿßŸäÿ© ŸÑŸÑŸÜŸáÿßŸäÿ©.",
        skill3_title: "ÿÆŸÅÿ∂ ÿßŸÑÿ™ŸÉÿßŸÑŸäŸÅ",
        skill3_desc: "ÿ™ÿ≠ŸÇŸäŸÇ ŸàŸÅŸàÿ±ÿßÿ™ ÿ®ŸÖŸÑÿßŸäŸäŸÜ ÿßŸÑÿ¨ŸÜŸäŸáÿßÿ™ Ÿàÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿπÿßÿ¶ÿØ ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±.",
        skill4_title: "ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿä",
        skill4_desc: "ÿßÿ™ÿÆÿßÿ∞ ÿßŸÑŸÇÿ±ÿßÿ±ÿßÿ™ ÿ®ÿµŸÑÿßÿ≠Ÿäÿ© ŸÉÿßŸÖŸÑÿ© Ÿàÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿÆÿ∑ÿ∑ ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿäÿ© ÿßŸÑŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸäÿ©.",
        skill5_title: "ŸÇŸäÿßÿØÿ© ÿßŸÑŸÅÿ±ŸÇ",
        skill5_desc: "ÿÆÿ®ÿ±ÿ© ŸÅŸä ŸÇŸäÿßÿØÿ© ÿßŸÑŸÅÿ±ŸÇ ÿßŸÑŸÉÿ®Ÿäÿ±ÿ© Ÿàÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿßÿ±ÿØ ÿßŸÑÿ®ÿ¥ÿ±Ÿäÿ© ÿ®ŸÉŸÅÿßÿ°ÿ©.",
        skill6_title: "ÿπŸÖŸÑŸäÿßÿ™ ÿ£ŸÜÿ∏ŸÖÿ© PMS ÿßŸÑŸÅŸÜÿØŸÇŸäÿ©",
        skill6_desc: "ÿÆÿ®ÿ±ÿ© ÿπŸÖŸäŸÇÿ© ŸÅŸä ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑŸÅŸÜÿØŸÇŸäÿ© Ÿàÿ™ÿ∑ŸàŸäÿ± ÿ£ŸÜÿ∏ŸÖÿ© PMS ŸÖÿÆÿµÿµÿ©.",
        skill7_title: "ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™",
        skill7_desc: "ÿ™ÿµŸÖŸäŸÖ Ÿàÿ™ŸÜŸÅŸäÿ∞ ÿ≠ŸÑŸàŸÑ ŸÖÿµŸÖŸÖÿ© ÿÆÿµŸäÿµÿßŸã ŸÑÿ≥ÿØ ÿßŸÑÿ´ÿ∫ÿ±ÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©.",
        skill8_title: "ÿπŸÑÿßŸÇÿßÿ™ ÿ£ÿµÿ≠ÿßÿ® ÿßŸÑŸÖÿµŸÑÿ≠ÿ©",
        skill8_desc: "ÿ∂ŸÖÿßŸÜ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿ•Ÿäÿ¨ÿßÿ®Ÿäÿ© ŸÑŸÑÿπŸÖŸÑÿßÿ° Ÿàÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ¥ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©.",

        // Certifications
        certifications_title: '<span class="accent-color">&#x1F393;</span> ÿßŸÑŸÖÿ§ŸáŸÑÿßÿ™ ŸàÿßŸÑÿ¥ŸáÿßÿØÿßÿ™',
        cert1_title: "ÿÆÿ®ÿ±ÿ© ÿ•ÿØÿßÿ±Ÿäÿ© ŸÅŸä ÿπŸÖŸÑŸäÿßÿ™ ÿ£ŸÜÿ∏ŸÖÿ© PMS ÿßŸÑŸÅŸÜÿØŸÇŸäÿ©",
        cert1_desc: "ŸÖÿ≥ÿ™ŸàŸâ ŸÖÿ™ŸÇÿØŸÖ",
        cert2_title: "ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ¨ŸàÿØÿ© ŸÑŸÑÿ™ŸÖŸäÿ≤ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸä",
        cert2_desc: "ÿ™ÿ£ŸáŸäŸÑ ŸÖÿ™ÿÆÿµÿµ",
        cert3_title: "ÿØÿ®ŸÑŸàŸÖ ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ® (ÿßŸÑŸàÿßÿ¨Ÿáÿßÿ™ ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©)",
        cert3_desc: "ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ®",
        cert4_title: "ÿØÿ®ŸÑŸàŸÖ ÿ£ÿ≥ÿßÿ≥Ÿäÿßÿ™ ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ©",
        cert4_desc: "ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿßÿ™",
        certifications_footer: "ÿ£Ÿäÿ∂ÿßŸã: ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ¥ÿÆÿµŸäÿßÿ™ ÿßŸÑÿµÿπÿ®ÿ© ŸàŸÖŸÜÿ≠ÿ© AMIDEAST.",

        // Career
        career_title: '<span class="accent-color">&#x23F1;</span> ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑŸÖŸáŸÜŸä - ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿÆÿ®ÿ±ÿ©',
        career1_date: "ŸÖÿßÿ±ÿ≥ 2024 - ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä",
        career1_title: "ŸÖÿØŸäÿ± ÿßŸÑÿπŸÖŸÑŸäÿßÿ™",
        career1_location: "ÿØŸÑÿ™ÿß ÿØÿ±ŸäŸÖ | ŸÖÿµÿ±",
        career1_item1: "ŸÇŸäÿßÿØÿ© ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸÉÿßŸÖŸÑÿ© ŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿ™ÿ¥ŸÖŸÑ 200 ÿ¥ÿßŸÑŸäŸá ŸàŸÅŸÜÿØŸÇŸäŸÜ ŸàŸÖÿ∑ÿπŸÖ.",
        career1_item2: "ÿ•ÿØÿßÿ±ÿ© ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ© ŸÖŸàÿ≥ŸÖŸäÿ© ÿ®ŸÇŸäŸÖÿ© 7.3 ŸÖŸÑŸäŸàŸÜ ÿ¨ŸÜŸäŸá ŸÖÿµÿ±Ÿä ÿ®ŸÉŸÅÿßÿ°ÿ©.",
        career1_item3: "ÿ•ÿØÿßÿ±ÿ© ÿπŸÑÿßŸÇÿßÿ™ ÿßŸÑŸÖŸÑÿßŸÉ (ÿ£ÿµÿ≠ÿßÿ® ÿßŸÑÿ¥ÿßŸÑŸäŸáÿßÿ™) ŸÑÿ™Ÿàÿ≥Ÿäÿπ ŸÖÿ≠ŸÅÿ∏ÿ© ÿßŸÑÿ¥ÿ±ŸÉÿ©.",
        career4_date: "ÿßŸÑÿ™ÿπŸÑŸäŸÖ",
        career4_title: "ÿ®ŸÉÿßŸÑŸàÿ±ŸäŸàÿ≥ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ÿπŸÖÿßŸÑ",
        career4_location: "ÿ¨ÿßŸÖÿπÿ© ŸÉŸÅÿ± ÿßŸÑÿ¥ŸäÿÆ",
        
        // Contact
        contact_title: '<span class="accent-color">|</span> ÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿ£ÿ≠ŸÖÿØ ŸáŸàŸäÿØŸä',
        contact_desc: "For strategic partnership opportunities or consultation on operations and hospitality management, please reach out.",
        contact_name_label: "Full Name",
        contact_name_placeholder: "Enter your name",
        contact_email_label: "Email Address",
        contact_email_placeholder: "Enter your email",
        contact_message_label: "Project Scope / Inquiry",
        contact_message_placeholder: "Describe the type of partnership or challenge you are facing",
        contact_submit_btn: "Send Message",
        formspree_notice: "*This form uses the FormSubmit service to ensure email delivery without server-side code. Please try submitting a test email to verify the connection.",
        footer_text1: '&copy; 2025 Ahmed Heweide | Operations Manager. Performance-driven Minimalist Design.',
    }
};

function setLanguage(lang) {
    currentLang = lang;
    
    // Merge local content with Firestore content (Firestore data overrides local data)
    // We use data.ui_en and data.ui_ar keys from Firestore
    const localContent = content[lang];
    const firestoreContent = (lang === 'ar') ? uiData.ui_ar : uiData.ui_en;
    
    // Final content object for the current language
    const finalContent = { ...localContent, ...(firestoreContent || {}) };
    
    const body = document.body;
    
    const dir = (lang === 'ar') ? 'rtl' : 'ltr';
    body.setAttribute('dir', dir);
    document.documentElement.setAttribute('lang', lang);

    for (const key in finalContent) {
        const elements = document.querySelectorAll(`[data-i18n="${key}"]`);
        elements.forEach(el => {
            el.innerHTML = finalContent[key];
        });

        const placeholderElements = document.querySelectorAll(`[data-i18n-placeholder="${key}"]`);
        placeholderElements.forEach(el => {
            if (el.placeholder !== undefined) {
                el.placeholder = finalContent[key];
                el.style.textAlign = (lang === 'ar') ? 'right' : 'left'; 
            }
        });
    }
    
    // FIX: Apply RTL specific alignment to static elements in the Hero section
    const heroTextContainer = document.getElementById('hero-text-container');
    if (heroTextContainer) {
        // Ensure the entire text block aligns right
        heroTextContainer.style.textAlign = (lang === 'ar') ? 'right' : 'left'; 
    }

    document.getElementById('page-title').textContent = finalContent.page_title;
    const langButton = document.getElementById('lang-toggle-button');
    if (langButton) langButton.textContent = (lang === 'ar') ? 'English' : 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©';
    
    // Update Admin button text based on current authentication state
    const adminButton = document.getElementById('admin-toggle-button');
    if (adminButton) {
        if (auth?.currentUser?.email === ADMIN_EMAIL) {
            adminButton.textContent = content[currentLang].admin_login_btn_logged_in;
        } else {
            adminButton.textContent = content[currentLang].admin_login_btn;
        }
    }
    
    // Re-render blog posts to update language for dynamic content
    if (db) renderBlogPosts();
}


// ÿØÿßŸÑÿ© ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ®ŸäŸÜ ÿßŸÑŸÑÿ∫ÿßÿ™ (ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠Ÿáÿß ŸÑÿ™ÿπŸÖŸÑ ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠)
function toggleLanguage() {
    const newLang = (currentLang === 'en') ? 'ar' : 'en';
    setLanguage(newLang);
    
    const menu = document.getElementById('mobile-menu');
    if (menu.classList.contains('mobile-menu-open')) {
        toggleMenu();
    }
}

// ÿØÿßŸÑÿ© ŸÅÿ™ÿ≠/ÿ•ÿ∫ŸÑÿßŸÇ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ŸÜŸÇŸÑ ŸÑŸÑŸáÿßÿ™ŸÅ
function toggleMenu() {
    const menu = document.getElementById('mobile-menu');
    const button = document.getElementById('menu-button');
    
    menu.classList.toggle('mobile-menu-open');
    
    const isExpanded = menu.classList.contains('mobile-menu-open');
    button.setAttribute('aria-expanded', isExpanded);
}

// ---------------------------------------------
// Firebase Initialization & Auth & UI Content Fetching
// ---------------------------------------------

async function initFirebase() {
    try {
        const appId = typeof __app_id !== 'undefined' ? __app_id : firebaseConfig.projectId; 
        
        // 1. Ensure initialization happens once
        if (!app) {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);
        }
        
        // 2. Setup Auth State Listener
        onAuthStateChanged(auth, (user) => {
            const adminButton = document.getElementById('admin-toggle-button');
            
            // Handle user change
            if (user) {
                userId = user.uid;
                // Path is constructed using the actual UID if logged in
                BLOG_COLLECTION_PATH = `artifacts/${appId}/users/${userId}/posts`; 
            } else {
                // If signed out, revert to default_user path
                userId = 'default_user';
                BLOG_COLLECTION_PATH = `artifacts/${appId}/users/${userId}/posts`; 
            }

            const isAdmin = user && user.email === ADMIN_EMAIL;
        
            if (isAdmin) {
                adminButton.textContent = content[currentLang].admin_login_btn_logged_in;
                // FIX: Show admin panel automatically on successful login if it was triggered manually
                const isManualLogin = document.getElementById('login-modal')?.classList.contains('show');
                document.getElementById('login-modal')?.classList.remove('show');
                if (isManualLogin) {
                    toggleAdminPanel(); // Show the panel immediately after manual successful login
                }

            } else {
                adminButton.textContent = content[currentLang].admin_login_btn;
                hideAdminPanel();
            }
            adminButton.disabled = false; // Enable button after auth state is known
            
            // Render posts based on the new user ID (either logged in or default_user)
            renderBlogPosts(); 
        });
        
        // 3. Fetch and watch the UI Content document
        const uiDocRef = doc(db, 'artifacts', appId, 'ui_content', 'data'); 
        onSnapshot(uiDocRef, (docSnap) => {
            if (docSnap.exists()) {
                uiData = docSnap.data();
                setLanguage(currentLang); // Re-render UI after data is fetched/updated
            } else {
                console.warn("UI content document not found. Using local fallbacks.");
                uiData = {}; // Use empty object if not found
                setLanguage(currentLang); // Use fallbacks/local content
            }
        }, (error) => {
             console.error("Firestore UI content watch error: ", error);
        });

    } catch (e) {
        console.error("Error during Firebase initialization or authentication: ", e);
        document.getElementById('blog-posts-container').innerHTML = '<p class="col-span-3 text-center text-red-400">Failed to load blog posts. Check console for Firebase errors.</p>';
    }
}

// ---------------------------------------------
// Blog Management (CRUD)
// ---------------------------------------------

function renderBlogPosts() {
    if (!db) return;
    
    // NOTE: Path updated by onAuthStateChanged listener
    const q = query(collection(db, BLOG_COLLECTION_PATH), orderBy('date', 'desc')); 
    const container = document.getElementById('blog-posts-container');
    const listContainer = document.getElementById('posts-list');
    
    // Show loading message
    const loadingMessage = content[currentLang].blog_loading;
    if (!container.innerHTML || container.innerHTML.includes(loadingMessage)) {
         container.innerHTML = `<p class="col-span-3 text-center text-gray-500" data-i18n="blog_loading">${loadingMessage}</p>`;
    }

    onSnapshot(q, (snapshot) => {
        let postsHTML = '';
        let adminListHTML = '';
        const isAdmin = auth?.currentUser?.email === ADMIN_EMAIL;
        
        snapshot.forEach(doc => {
            const post = doc.data();
            const postId = doc.id;
            const dateStr = new Date(post.date.seconds * 1000).toLocaleDateString(currentLang === 'ar' ? 'ar-EG' : 'en-US');
            
            // Public Card HTML
            postsHTML += `
                <div id="post-${postId}" class="data-card p-6 rounded-2xl cursor-pointer hover:shadow-lg hover:shadow-[#00ffaa33]" onclick="showFullPost('${postId}')">
                    <p class="text-xs uppercase text-gray-500 mb-2">${dateStr}</p>
                    <h4 class="text-xl font-bold mb-3 accent-color">${currentLang === 'ar' ? post.title_ar : post.title_en}</h4>
                    <p class="text-gray-400 text-sm mb-3">${currentLang === 'ar' ? post.desc_ar : post.desc_en}</p>
                    <button class="text-xs accent-color mt-3 inline-block hover:underline">${content[currentLang].blog_read_more}</button>
                </div>
            `;
            
            // Admin List HTML (Visible if logged in as admin)
            if (isAdmin) {
                const postDataForEdit = JSON.stringify({
                    title_en: post.title_en,
                    title_ar: post.title_ar,
                    desc_en: post.desc_en,
                    desc_ar: post.desc_ar,
                    content: post.content
                }).replace(/'/g, "\\'").replace(/"/g, '&quot;');

                adminListHTML += `
                    <div class="flex justify-between items-center p-3 border-b border-gray-700 last:border-b-0">
                        <span class="text-gray-300 text-sm">${post.title_en} (${dateStr})</span>
                        <div>
                            <button onclick="editPost('${postId}', '${postDataForEdit}')" class="text-blue-400 hover:text-blue-300 text-sm mx-2">${content[currentLang].admin_edit_btn}</button>
                            <button onclick="deletePost('${postId}')" class="text-red-400 hover:text-red-300 text-sm">${content[currentLang].admin_delete_btn}</button>
                        </div>
                    </div>
                `;
            }
        });
        
        container.innerHTML = postsHTML || `<p class="col-span-3 text-center text-gray-500">${content[currentLang].blog_loading}</p>`;
        listContainer.innerHTML = adminListHTML || `<p class="text-gray-500 text-sm">No posts yet.</p>`;
        
        document.querySelector('#blog h3').innerHTML = content[currentLang].blog_title;

    }, (error) => {
        console.error("Firestore read error: ", error);
        container.innerHTML = '<p class="col-span-3 text-center text-red-400">Error loading posts. Check console for details.</p>';
    });
}

// Function to save/update a post
async function savePost() {
    if (!db || !auth.currentUser || auth.currentUser.email !== ADMIN_EMAIL) { 
        alert(content[currentLang].admin_unauthorized_msg);
        return;
    }

    const id = document.getElementById('post-id').value;
    const titleEn = document.getElementById('post-title-en').value.trim();
    const titleAr = document.getElementById('post-title-ar').value.trim();
    const descEn = document.getElementById('post-desc-en').value.trim();
    const descAr = document.getElementById('post-desc-ar').value.trim();
    const postContent = document.getElementById('post-content').value.trim();
    const status = document.getElementById('admin-status');

    if (!titleEn || !titleAr || !postContent) {
        status.textContent = (currentLang === 'ar') ? 'ÿßŸÑÿ±ÿ¨ÿßÿ° ŸÖŸÑÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© (ÿßŸÑÿπŸÜÿßŸàŸäŸÜ ŸàÿßŸÑŸÖÿ≠ÿ™ŸàŸâ).' : 'Please fill all required fields (Titles and Content).';
        return;
    }

    status.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...' : 'Saving...';

    const postData = {
        title_en: titleEn,
        title_ar: titleAr,
        desc_en: descEn,
        desc_ar: descAr,
        content: postContent, // Markdown content
        date: Timestamp.now(),
    };
    
    const postsCollectionRef = collection(db, BLOG_COLLECTION_PATH);

    try {
        if (id) {
            // Update existing document, using merge to keep existing fields if not overwritten
            await setDoc(doc(postsCollectionRef, id), postData, { merge: true });
            status.textContent = (currentLang === 'ar') ? 'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÇÿßŸÑ ÿ®ŸÜÿ¨ÿßÿ≠!' : 'Post updated successfully!';
        } else {
            // Add new document
            await setDoc(doc(postsCollectionRef), postData);
            status.textContent = (currentLang === 'ar') ? 'ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÇÿßŸÑ ÿ¨ÿØŸäÿØ ÿ®ŸÜÿ¨ÿßÿ≠!' : 'New post added successfully!';
        }
        
        // Clear form and hide panel
        setTimeout(() => {
            document.getElementById('admin-status').textContent = '';
            document.getElementById('post-id').value = '';
            document.getElementById('post-title-en').value = '';
            document.getElementById('post-title-ar').value = '';
            document.getElementById('post-desc-en').value = '';
            document.getElementById('post-desc-ar').value = '';
            document.getElementById('post-content').value = '';
            // hideAdminPanel(); // Keep open for convenience
        }, 1500);

    } catch (e) {
        console.error("Error saving post: ", e);
        status.textContent = (currentLang === 'ar') ? 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÇÿßŸÑ. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÄ Console.' : 'Error saving post. Check console.';
    }
}

// Function to delete a post
async function deletePost(id) {
    if (!db || !auth.currentUser || auth.currentUser.email !== ADMIN_EMAIL) { 
        alert(content[currentLang].admin_unauthorized_msg);
        return;
    }
    const deleteMessage = (currentLang === 'ar') ? 'ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑŸÖŸÇÿßŸÑÿü' : 'Are you sure you want to delete this post?';
    
    if (confirm(deleteMessage)) { 
        try {
            const postsCollectionRef = collection(db, BLOG_COLLECTION_PATH);
            await deleteDoc(doc(postsCollectionRef, id));
        } catch (e) {
            console.error("Error deleting post: ", e);
            alert("Error deleting post. Check console.");
        }
    }
}

// Function to display the full post content
async function showFullPost(postId) {
    if (!db) return;
    try {
        const docRef = doc(db, BLOG_COLLECTION_PATH, postId);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
            const post = docSnap.data();
            const container = document.getElementById('full-post-view');
            const titleElement = document.getElementById('full-post-title');
            const dateElement = document.getElementById('full-post-date');
            const contentElement = document.getElementById('full-post-content');
            
            const dateStr = new Date(post.date.seconds * 1000).toLocaleDateString(currentLang === 'ar' ? 'ar-EG' : 'en-US');
            
            // Check if 'marked' is loaded globally, otherwise use a fallback
            const htmlContent = window.marked ? window.marked.parse(post.content) : `<pre>${post.content}</pre>`;
            
            titleElement.textContent = (currentLang === 'ar' ? post.title_ar : post.title_en);
            dateElement.textContent = dateStr;
            contentElement.innerHTML = htmlContent;
            
            document.getElementById('blog-posts-container').classList.add('hidden');
            document.getElementById('full-post-view').classList.remove('hidden');
            
            container.scrollIntoView({ behavior: 'smooth' });

        } else {
            alert((currentLang === 'ar') ? 'ÿßŸÑŸÖŸÇÿßŸÑ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ!' : 'Post not found!');
        }
    } catch (e) {
        console.error("Error fetching full post: ", e);
        alert((currentLang === 'ar') ? 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÇÿßŸÑ.' : 'Error loading post.');
    }
}

// Function to hide the full post view
function hideFullPost() {
    document.getElementById('full-post-view').classList.add('hidden');
    document.getElementById('blog-posts-container').classList.remove('hidden');
    document.getElementById('blog').scrollIntoView({ behavior: 'smooth' });
}

// Function to load post data into the form for editing
function editPost(id, postJsonString) {
    // FIX: Properly parse the JSON string which was double-escaped in renderBlogPosts
    let post;
    try {
        post = JSON.parse(postJsonString.replace(/&quot;/g, '"').replace(/\\'/g, "'"));
    } catch (e) {
        console.error("Error parsing post data for editing:", e);
        alert("Error loading post data for editing.");
        return;
    }

    // Check authorization first
    if (!auth.currentUser || auth.currentUser.email !== ADMIN_EMAIL) {
        alert(content[currentLang].admin_unauthorized_msg);
        return;
    }
    
    // Switch to Blog Tab if we are editing a post
    switchAdminTab('blog'); 

    document.getElementById('post-id').value = id;
    document.getElementById('post-title-en').value = post.title_en;
    document.getElementById('post-title-ar').value = post.title_ar;
    document.getElementById('post-desc-en').value = post.desc_en;
    document.getElementById('post-desc-ar').value = post.desc_ar;
    document.getElementById('post-content').value = post.content;
    document.getElementById('admin-status').textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸÇÿßŸÑ...' : 'Editing post...';
    
    document.getElementById('admin-panel').classList.remove('hidden');
    document.getElementById('admin-panel').scrollIntoView({ behavior: 'smooth' });
}


// ---------------------------------------------
// UI Content Management
// ---------------------------------------------

// Function to handle showing the UI content editing interface
function showUIContentEditor() {
    if (!auth.currentUser || auth.currentUser.email !== ADMIN_EMAIL) {
        alert(content[currentLang].admin_unauthorized_msg);
        return;
    }
    
    const editorContainer = document.getElementById('ui-editor-container');
    const status = document.getElementById('ui-admin-status');
    
    if (!editorContainer) {
        status.textContent = "Error: UI Editor container not found.";
        return;
    }

    status.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸàÿßÿ¨Ÿáÿ©...' : 'Loading UI content...';

    // Data keys to display in the editor (Only data with different EN/AR versions needed)
    const keys = [
        'header_subtitle', 'about_tagline', 'about_main_title', 'about_body', 
        'kpis_title', 'kpi1_label', 'kpi1_desc', 'kpi2_label', 'kpi2_desc', 
        'kpi3_label', 'kpi3_desc',
        'projects_title', 'project1_title', 'project1_desc', 'project1_item1', 'project1_item2', 'project1_item3',
        'project2_title', 'project2_desc', 'project2_item1', 'project2_item2', 'project2_item3',
        'expertise_title', 'skill1_title', 'skill1_desc', 'skill2_title', 'skill2_desc', 
        'skill3_title', 'skill3_desc', 'skill4_title', 'skill4_desc', 'skill5_title', 'skill5_desc', 
        'skill6_title', 'skill6_desc', 'skill7_title', 'skill7_desc', 'skill8_title', 'skill8_desc',
        'testimonials_title', 'testimonial1_quote', 'testimonial1_name', 'testimonial1_role', 
        'testimonial2_quote', 'testimonial2_name', 'testimonial2_role',
        'certifications_title', 'cert1_title', 'cert1_desc', 'cert2_title', 'cert2_desc', 
        'cert3_title', 'cert3_desc', 'cert4_title', 'cert4_desc', 'certifications_footer',
    ];

    let html = '';
    
    // Iterate over keys to build the form
    keys.forEach(key => {
        // Use merged data (Firestore or local fallback)
        const enValue = uiData?.ui_en?.[key] || content.en[key] || '';
        const arValue = uiData?.ui_ar?.[key] || content.ar[key] || '';
        
        const isLongText = key.includes('body') || key.includes('desc') || key.includes('quote') || key.includes('item');

        html += `
            <div class="mb-6 p-4 border border-gray-700 rounded-lg">
                <label class="block text-lg font-semibold mb-2 accent-color">${key}</label>
                <p class="text-sm text-gray-500 mb-2">${isLongText ? 'Use Textarea (supports **bold** and Markdown for lists where applicable)' : 'Use Input'}</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        `;
        
        // English Field
        if (isLongText) {
            html += `
                <textarea data-key="${key}" data-lang="en" placeholder="${key} (English)" rows="4" class="w-full text-left" required>${enValue}</textarea>
            `;
        } else {
            html += `
                <input type="text" data-key="${key}" data-lang="en" placeholder="${key} (English)" value="${enValue}" class="w-full text-left" required>
            `;
        }

        // Arabic Field
        if (isLongText) {
            html += `
                <textarea data-key="${key}" data-lang="ar" placeholder="${key} (Arabic)" rows="4" class="w-full text-right" required>${arValue}</textarea>
            `;
        } else {
            html += `
                <input type="text" data-key="${key}" data-lang="ar" placeholder="${key} (Arabic)" value="${arValue}" class="w-full text-right" required>
            `;
        }
        
        html += `
                </div>
            </div>
        `;
    });
    
    editorContainer.innerHTML = html;
    status.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ™ÿπÿØŸäŸÑ.' : 'Ready for editing.';
}

// Function to save the UI content
async function saveUIContent() {
    if (!db || !auth.currentUser || auth.currentUser.email !== ADMIN_EMAIL) { 
        alert(content[currentLang].admin_unauthorized_msg);
        return;
    }
    
    const status = document.getElementById('ui-admin-status');
    const saveButton = document.getElementById('save-ui-btn');
    const editorContainer = document.getElementById('ui-editor-container');
    
    saveButton.disabled = true;
    status.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ≠ŸÅÿ∏...' : 'Saving...';
    
    const newUIContent = {
        ui_en: {},
        ui_ar: {}
    };

    // Extract data from the form fields
    const fields = editorContainer.querySelectorAll('[data-key]');
    fields.forEach(field => {
        const key = field.getAttribute('data-key');
        const lang = field.getAttribute('data-lang');
        
        if (lang === 'en') {
            newUIContent.ui_en[key] = field.value.trim();
        } else if (lang === 'ar') {
            newUIContent.ui_ar[key] = field.value.trim();
        }
    });

    try {
        const appId = typeof __app_id !== 'undefined' ? __app_id : firebaseConfig.projectId; 
        const uiDocRef = doc(db, 'artifacts', appId, 'ui_content', 'data'); 
        
        // Use setDoc to replace the entire content document
        await setDoc(uiDocRef, newUIContent);
        
        // The onSnapshot listener in initFirebase will catch this update and call setLanguage
        
        status.textContent = (currentLang === 'ar') ? 'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿ®ŸÜÿ¨ÿßÿ≠!' : 'UI content updated successfully!';
        
        setTimeout(() => {
            status.textContent = '';
        }, 1500);

    } catch (e) {
        console.error("Error saving UI content: ", e);
        status.textContent = (currentLang === 'ar') ? 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÄ Console.' : 'Error saving UI content. Check console.';
    } finally {
        saveButton.disabled = false;
    }
}


// Admin Panel Visibility Toggles
function switchAdminTab(tab) {
    const blogSection = document.getElementById('blog-manager-section');
    const uiSection = document.getElementById('ui-manager-section');
    const blogButton = document.getElementById('toggle-blog-manager');
    const uiButton = document.getElementById('toggle-ui-manager');
    
    if (tab === 'blog') {
        blogSection.classList.remove('hidden');
        uiSection.classList.add('hidden');
        blogButton.classList.replace('bg-gray-700', 'bg-orange-600');
        uiButton.classList.replace('bg-orange-600', 'bg-gray-700');
    } else if (tab === 'ui') {
        // Load the UI content before showing the editor
        showUIContentEditor(); 
        blogSection.classList.add('hidden');
        uiSection.classList.remove('hidden');
        uiButton.classList.replace('bg-gray-700', 'bg-orange-600');
        blogButton.classList.replace('bg-orange-600', 'bg-gray-700');
    }
}

function toggleAdminPanel() {
    const panel = document.getElementById('admin-panel');
    panel.classList.toggle('hidden');
    if (!panel.classList.contains('hidden')) {
        // Clear Blog form when opening
        document.getElementById('post-id').value = '';
        document.getElementById('post-title-en').value = '';
        document.getElementById('post-title-ar').value = '';
        document.getElementById('post-desc-en').value = '';
        document.getElementById('post-desc-ar').value = '';
        document.getElementById('post-content').value = '';
        document.getElementById('admin-status').textContent = '';
        
        // Default to showing the Blog Manager on open
        switchAdminTab('blog'); 
    }
}
function hideAdminPanel() {
    document.getElementById('admin-panel').classList.add('hidden');
}


// ---------------------------------------------
// Contact Form Handling (FormSubmit)
// ---------------------------------------------

async function handleContactSubmit(event) {
    event.preventDefault(); 
    
    const form = event.target;
    const statusDiv = document.getElementById('form-status');
    const submitButton = document.getElementById('submit-button');
    
    const originalButtonText = submitButton.innerHTML;
    
    submitButton.disabled = true;
    submitButton.innerHTML = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ...' : 'Sending...';
    statusDiv.classList.remove('visible'); 

    try {
        const formData = new FormData(form);
        const queryParams = new URLSearchParams(formData).toString();
        
        const response = await fetch(form.action, {
            method: 'POST',
            body: queryParams,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        });

        if (response.ok) {
            // FormSubmit typically redirects (status 302 or similar) on success
            form.reset();
            statusDiv.textContent = (currentLang === 'ar') ? 'ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠. Ÿäÿ±ÿ¨Ÿâ ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÑŸÑÿ™ÿ£ŸÉŸäÿØ!' : 'Message sent successfully. Please check your email to confirm!';
            statusDiv.className = 'success';
        } else {
            statusDiv.textContent = (currentLang === 'ar') ? 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÑÿßÿ≠ŸÇÿßŸã.' : 'An error occurred during submission. Please try again later.';
            statusDiv.className = 'error';
        }

    } catch (error) {
        console.error("Form submission error:", error);
        statusDiv.textContent = (currentLang === 'ar') ? 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßÿ™ÿµÿßŸÑŸÉ ÿ®ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™.' : 'Connection error. Please check your internet connection.';
        statusDiv.className = 'error';
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;
        statusDiv.style.display = 'block';
        statusDiv.classList.add('visible');
    }
}


// ---------------------------------------------
// UI & Event Listeners Setup
// ---------------------------------------------

function openLoginModal() {
    document.getElementById('login-modal').classList.add('show');
}

function closeLoginModal() {
    const loginSubmitButton = document.getElementById('login-submit');

    document.getElementById('login-modal').classList.remove('show');
    document.getElementById('login-status').textContent = '';
    
    // FIX: Clear the email and password fields too
    document.getElementById('login-email').value = '';
    document.getElementById('login-password').value = '';

    // FIX: Reset the button state and text in case it was stuck on 'Checking...'
    if (loginSubmitButton) {
         loginSubmitButton.disabled = false;
         loginSubmitButton.textContent = (currentLang === 'ar') ? 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ' : 'Login'; 
    }
}

async function handleAdminToggle() {
    const adminButton = document.getElementById('admin-toggle-button');
    adminButton.disabled = true;
    
    // Check if the user is currently logged in as admin
    if (auth.currentUser && auth.currentUser.email === ADMIN_EMAIL) {
        const panel = document.getElementById('admin-panel');
        
        if (panel && !panel.classList.contains('hidden')) {
            // Case 1: Panel is visible -> User clicked to toggle panel view (hide/show)
            toggleAdminPanel();
            adminButton.disabled = false;
        } else {
            // Case 2: User is logged in, and panel is hidden -> User clicked to LOGOUT
            try {
                adminButton.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿÆÿ±Ÿàÿ¨...' : 'Logging out...'; 
                
                // IMPORTANT: Use signOut to explicitly terminate the session
                await signOut(auth);
                
                // onAuthStateChanged listener handles UI update and button re-enabling
            } catch (e) {
                console.error("Logout failed:", e);
                alert((currentLang === 'ar') ? 'ŸÅÿ¥ŸÑ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨. Ÿäÿ±ÿ¨Ÿâ ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑŸÄ Console.' : 'Logout failed. Check console.');
                // Revert button state if logout fails
                adminButton.textContent = content[currentLang].admin_login_btn_logged_in;
                adminButton.disabled = false; 
            }
        }
    } else {
        // Case 3: Not logged in -> Show Login Modal
        openLoginModal();
        adminButton.disabled = false;
    }
}

async function handleLoginSubmit() {
    const email = document.getElementById('login-email').value.trim();
    const password = document.getElementById('login-password').value.trim();
    const loginStatus = document.getElementById('login-status');
    const loginSubmitButton = document.getElementById('login-submit');
    
    loginStatus.textContent = ''; // Clear previous error

    // FIX: This section ensures the button resets if fields are empty
    if (!email || !password) {
        loginStatus.textContent = content[currentLang].admin_unauthorized_msg; // Use generic unauthorized msg
        loginSubmitButton.textContent = (currentLang === 'ar') ? 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ' : 'Login'; 
        loginSubmitButton.disabled = false;
        return;
    }
    
    if (email !== ADMIN_EMAIL) {
        loginStatus.textContent = content[currentLang].admin_unauthorized_msg;
        loginSubmitButton.textContent = (currentLang === 'ar') ? 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ' : 'Login'; 
        loginSubmitButton.disabled = false;
        return;
    }
    
    const originalText = loginSubmitButton.textContent;
    loginSubmitButton.disabled = true;
    loginSubmitButton.textContent = (currentLang === 'ar') ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÇŸÇ...' : 'Checking...';

    try {
        await signInWithEmailAndPassword(auth, email, password);
        // Success is handled by onAuthStateChanged -> closeLoginModal
    } catch (error) {
        console.error("Login failed:", error);
        loginStatus.textContent = content[currentLang].admin_unauthorized_msg; 
        loginSubmitButton.textContent = originalText;
        loginSubmitButton.disabled = false;
    }
}


document.addEventListener('DOMContentLoaded', () => {
    initFirebase(); // Initialize Firebase
    
    // 1. Language and Menu Toggles
    document.getElementById('menu-button')?.addEventListener('click', toggleMenu);
    document.getElementById('lang-toggle-button')?.addEventListener('click', toggleLanguage);
    setLanguage("en"); // Set initial language

    // 2. Admin/Login Functionality
    document.getElementById('admin-toggle-button')?.addEventListener('click', handleAdminToggle);
    document.getElementById('login-cancel')?.addEventListener('click', closeLoginModal);
    document.getElementById('login-submit')?.addEventListener('click', handleLoginSubmit);
    
    // 3. Blog & UI Admin Functions
    document.getElementById('save-btn')?.addEventListener('click', savePost);
    document.getElementById('hide-admin')?.addEventListener('click', hideAdminPanel);
    document.getElementById('back-to-list')?.addEventListener('click', hideFullPost);
    
    // New UI Content Save Button
    document.getElementById('save-ui-btn')?.addEventListener('click', saveUIContent);
    
    // 4. Contact Form
    document.getElementById('contact-form')?.addEventListener('submit', handleContactSubmit);
});

// Expose global functions (Needed since main.js is a module)
window.savePost = savePost;
window.deletePost = deletePost;
window.editPost = editPost;
window.showFullPost = showFullPost;
window.hideFullPost = hideFullPost;
window.toggleAdminPanel = toggleAdminPanel;
window.setLanguage = setLanguage;
window.handleAdminToggle = handleAdminToggle;
window.toggleMenu = toggleMenu; 
window.closeLoginModal = closeLoginModal;
window.openLoginModal = openLoginModal;
window.switchAdminTab = switchAdminTab; // New global function for admin tabs
window.saveUIContent = saveUIContent; // New global function for saving UI content
